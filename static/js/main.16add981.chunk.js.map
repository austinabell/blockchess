{"version":3,"sources":["config.js","components/SignIn.jsx","App.js","theme.js","index.js"],"names":["CONTRACT_NAME","process","module","exports","env","networkId","nodeUrl","contractName","walletUrl","helperUrl","keyPath","HOME","masterAccount","Error","SignIn","Typography","variant","gutterBottom","App","contract","currentUser","nearConfig","wallet","useEffect","component","Button","color","onClick","signOut","window","location","replace","origin","pathname","requestSignIn","theme","createMuiTheme","palette","type","primary","main","secondary","error","deepOrange","A400","a","getConfig","nearAPI","deps","keyStore","BrowserLocalStorageKeyStore","near","walletConnection","getAccountId","account","state","amount","accountId","balance","viewMethods","changeMethods","sender","nearInitPromise","initContract","then","ReactDOM","render","ThemeProvider","CssBaseline","document","getElementById"],"mappings":"uFAAA,IAAMA,EAAgBC,8HAAYD,eAAiB,qBA4DnDE,EAAOC,QA1DP,SAAmBC,GACjB,OAAOA,GACL,IAAK,UACH,MAAO,CACLC,UAAW,UACXC,QAAS,+BACTC,aAAcP,EACdQ,UAAW,0BACXC,UAAW,mCAIf,IAAK,aACL,IAAK,cACL,IAAK,UACH,MAAO,CACLJ,UAAW,UACXC,QAAS,+BACTC,aAAcP,EACdQ,UAAW,kCACXC,UAAW,mCAEf,IAAK,UACH,MAAO,CACLJ,UAAW,UACXC,QAAS,+BACTC,aAAcP,EACdQ,UAAW,kCACXC,UAAW,mCAEf,IAAK,QACH,MAAO,CACLJ,UAAW,QACXC,QAAS,wBACTI,QAAQ,GAAD,OAAKT,8HAAYU,KAAjB,6BACPH,UAAW,+BACXD,aAAcP,GAElB,IAAK,OACL,IAAK,KACH,MAAO,CACLK,UAAW,cACXC,QAAS,kCACTC,aAAcP,EACdY,cAAe,aAEnB,IAAK,aACH,MAAO,CACLP,UAAW,sBACXC,QAAS,kCACTC,aAAcP,EACdY,cAAe,aAEnB,QACE,MAAMC,MAAM,6BAAD,OAA8BT,EAA9B,8C,mRCrDF,SAASU,IACtB,OACE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,QAAQC,cAAY,GAAxC,qD,sBCuFWC,EAjFH,SAAC,GAAmD,IAAjDC,EAAgD,EAAhDA,SAAUC,EAAsC,EAAtCA,YAAaC,EAAyB,EAAzBA,WAAYC,EAAa,EAAbA,OAGhDC,qBAAU,cAGP,CAACJ,IAuCJ,OACE,8BACE,gCACE,kBAACJ,EAAA,EAAD,CAAYC,QAAQ,KAAKQ,UAAU,KAAKP,cAAY,GAApD,cACCG,EACG,kBAACK,EAAA,EAAD,CAAQT,QAAQ,YAAYU,MAAM,YAAYC,QAVxC,WACdL,EAAOM,UACPC,OAAOC,SAASC,QAAQF,OAAOC,SAASE,OAASH,OAAOC,SAASG,YAQzD,WACA,kBAACR,EAAA,EAAD,CAAQT,QAAQ,YAAYU,MAAM,YAAYC,QAlBzC,WACbL,EAAOY,cACLb,EAAWd,aACX,qBAeM,WAGLa,EACG,kBAAC,IAAD,MACA,kBAACN,EAAD,Q,sDChDKqB,EAhBDC,YAAe,CACzBC,QAAS,CACLC,KAAM,OACNC,QAAS,CACLC,KAAM,WAEVC,UAAW,CACPD,KAAM,WAEVE,MAAO,CACHF,KAAMG,IAAWC,S,2DCF7B,oCAAAC,EAAA,6DACQxB,EAAayB,IAAU7C,cAD/B,SAIqB8C,UAAA,aACjBC,KAAM,CACJC,SAAU,IAAIF,YAAkBG,8BAE/B7B,IARP,UAIQ8B,EAJR,SAYQC,EAAmB,IAAIL,mBAAyBI,IAIjCE,eAhBvB,6BAkBiBD,EAAiBC,eAlBlC,SAmBsBD,EAAiBE,UAAUC,QAnBjD,mBAmB0DC,OAFtDpC,EAjBJ,CAkBMqC,UAlBN,KAmBMC,QAnBN,+BAwByB,IAAIX,WAAiBK,EAAiBE,UAAWjC,EAAWd,aAAc,CAE/FoD,YAAa,CAAC,eAEdC,cAAe,CAAC,cAGhBC,OAAQT,EAAiBC,iBA/B7B,eAwBQlC,EAxBR,yBAkCS,CAAEA,WAAUC,cAAaC,aAAY+B,qBAlC9C,6C,sBAqCAvB,OAAOiC,gB,0CAAkBC,GACtBC,MAAK,YAA8D,IAA3D7C,EAA0D,EAA1DA,SAAUC,EAAgD,EAAhDA,YAAaC,EAAmC,EAAnCA,WAAY+B,EAAuB,EAAvBA,iBAC1Ca,IAASC,OACP,kBAACC,EAAA,EAAD,CAAehC,MAAOA,GACpB,kBAACiC,EAAA,EAAD,MACA,kBAAC,EAAD,CACEjD,SAAUA,EACVC,YAAaA,EACbC,WAAYA,EACZC,OAAQ8B,KAGZiB,SAASC,eAAe,c","file":"static/js/main.16add981.chunk.js","sourcesContent":["const CONTRACT_NAME = process.env.CONTRACT_NAME || 'guest-book.testnet';\n\nfunction getConfig(env) {\n  switch(env) {\n    case 'mainnet':\n      return {\n        networkId: 'mainnet',\n        nodeUrl: 'https://rpc.mainnet.near.org',\n        contractName: CONTRACT_NAME,\n        walletUrl: 'https://wallet.near.org',\n        helperUrl: 'https://helper.mainnet.near.org'\n      };\n    // This is an example app so production is set to testnet.\n    // You can move production to mainnet if that is applicable.\n    case 'production':\n    case 'development':\n    case 'testnet':\n      return {\n        networkId: 'default',\n        nodeUrl: 'https://rpc.testnet.near.org',\n        contractName: CONTRACT_NAME,\n        walletUrl: 'https://wallet.testnet.near.org',\n        helperUrl: 'https://helper.testnet.near.org'\n      };\n    case 'betanet':\n      return {\n        networkId: 'betanet',\n        nodeUrl: 'https://rpc.betanet.near.org',\n        contractName: CONTRACT_NAME,\n        walletUrl: 'https://wallet.betanet.near.org',\n        helperUrl: 'https://helper.betanet.near.org'\n      };\n    case 'local':\n      return {\n        networkId: 'local',\n        nodeUrl: 'http://localhost:3030',\n        keyPath: `${process.env.HOME}/.near/validator_key.json`,\n        walletUrl: 'http://localhost:4000/wallet',\n        contractName: CONTRACT_NAME\n      };\n    case 'test':\n    case 'ci':\n      return {\n        networkId: 'shared-test',\n        nodeUrl: 'https://rpc.ci-testnet.near.org',\n        contractName: CONTRACT_NAME,\n        masterAccount: 'test.near'\n      };\n    case 'ci-betanet':\n      return {\n        networkId: 'shared-test-staging',\n        nodeUrl: 'https://rpc.ci-betanet.near.org',\n        contractName: CONTRACT_NAME,\n        masterAccount: 'test.near'\n      };\n    default:\n      throw Error(`Unconfigured environment '${env}'. Can be configured in src/config.js.`);\n  }\n}\n\nmodule.exports = getConfig;\n","import React from 'react';\nimport { Typography } from '@material-ui/core';\n\nexport default function SignIn() {\n  return (\n    <Typography variant=\"body1\" gutterBottom>\n      TODO: Some content when the user is not signed in\n    </Typography>\n  );\n}\n","import 'regenerator-runtime/runtime';\nimport React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\n// import Big from 'big.js';\nimport { Button, Typography } from '@material-ui/core';\nimport SignIn from './components/SignIn';\nimport Chessground from 'react-chessground'\n\n// const SUGGESTED_DONATION = '0';\n// const BOATLOAD_OF_GAS = Big(3).times(10 ** 13).toFixed();\n\nconst App = ({ contract, currentUser, nearConfig, wallet }) => {\n  // const [messages, setMessages] = useState([]);\n\n  useEffect(() => {\n    // // TODO: don't just fetch once; subscribe!\n    // contract.getMessages().then(setMessages);\n  }, [contract]);\n\n  // const onSubmit = (e) => {\n  //   e.preventDefault();\n\n  //   const { fieldset, message, donation } = e.target.elements;\n\n  //   fieldset.disabled = true;\n\n  //   // TODO: optimistically update page with new message,\n  //   // update blockchain data in background\n  //   // add uuid to each message, so we know which one is already known\n  //   contract.addMessage(\n  //     { text: message.value },\n  //     BOATLOAD_OF_GAS,\n  //     Big(donation.value || '0').times(10 ** 24).toFixed()\n  //   ).then(() => {\n  //     contract.getMessages().then(messages => {\n  //       setMessages(messages);\n  //       message.value = '';\n  //       donation.value = SUGGESTED_DONATION;\n  //       fieldset.disabled = false;\n  //       message.focus();\n  //     });\n  //   });\n  // };\n\n  const signIn = () => {\n    wallet.requestSignIn(\n      nearConfig.contractName,\n      'NEAR Guest Book'\n    );\n  };\n\n  const signOut = () => {\n    wallet.signOut();\n    window.location.replace(window.location.origin + window.location.pathname);\n  };\n\n  return (\n    <main>\n      <header>\n        <Typography variant=\"h2\" component=\"h2\" gutterBottom>BlockChess</Typography>\n        {currentUser\n          ? <Button variant=\"contained\" color=\"secondary\" onClick={signOut}>Log out</Button>\n          : <Button variant=\"contained\" color=\"secondary\" onClick={signIn}>Log in</Button>\n        }\n      </header>\n      {currentUser\n        ? <Chessground />\n        : <SignIn />\n      }\n      {/* {!!currentUser && !!messages.length && <Messages messages={messages} />} */}\n    </main>\n  );\n};\n\nApp.propTypes = {\n  contract: PropTypes.shape({\n    addMessage: PropTypes.func.isRequired,\n    getMessages: PropTypes.func.isRequired\n  }).isRequired,\n  currentUser: PropTypes.shape({\n    accountId: PropTypes.string.isRequired,\n    balance: PropTypes.string.isRequired\n  }),\n  nearConfig: PropTypes.shape({\n    contractName: PropTypes.string.isRequired\n  }).isRequired,\n  wallet: PropTypes.shape({\n    requestSignIn: PropTypes.func.isRequired,\n    signOut: PropTypes.func.isRequired\n  }).isRequired\n};\n\nexport default App;\n","import { deepOrange } from '@material-ui/core/colors';\nimport { createMuiTheme } from '@material-ui/core/styles';\n\nconst theme = createMuiTheme({\n    palette: {\n        type: 'dark',\n        primary: {\n            main: '#202020',\n        },\n        secondary: {\n            main: '#1de9b6',\n        },\n        error: {\n            main: deepOrange.A400,\n        },\n\n    },\n});\n\nexport default theme;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport getConfig from './config.js';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport theme from './theme';\nimport * as nearAPI from 'near-api-js';\nimport 'react-chessground/dist/styles/chessground.css'\n\n// Initializing contract\nasync function initContract() {\n  const nearConfig = getConfig(process.env.NODE_ENV || 'testnet');\n\n  // Initializing connection to the NEAR TestNet\n  const near = await nearAPI.connect({\n    deps: {\n      keyStore: new nearAPI.keyStores.BrowserLocalStorageKeyStore()\n    },\n    ...nearConfig\n  });\n\n  // Needed to access wallet\n  const walletConnection = new nearAPI.WalletConnection(near);\n\n  // Load in account data\n  let currentUser;\n  if (walletConnection.getAccountId()) {\n    currentUser = {\n      accountId: walletConnection.getAccountId(),\n      balance: (await walletConnection.account().state()).amount\n    };\n  }\n\n  // Initializing our contract APIs by contract name and configuration\n  const contract = await new nearAPI.Contract(walletConnection.account(), nearConfig.contractName, {\n    // View methods are read-only â€“ they don't modify the state, but usually return some value\n    viewMethods: ['getMessages'],\n    // Change methods can modify the state, but you don't receive the returned value when called\n    changeMethods: ['addMessage'],\n    // Sender is the account ID to initialize transactions.\n    // getAccountId() will return empty string if user is still unauthorized\n    sender: walletConnection.getAccountId()\n  });\n\n  return { contract, currentUser, nearConfig, walletConnection };\n}\n\nwindow.nearInitPromise = initContract()\n  .then(({ contract, currentUser, nearConfig, walletConnection }) => {\n    ReactDOM.render(\n      <ThemeProvider theme={theme}>\n        <CssBaseline />\n        <App\n          contract={contract}\n          currentUser={currentUser}\n          nearConfig={nearConfig}\n          wallet={walletConnection}\n        />\n      </ThemeProvider>,\n      document.getElementById('root')\n    );\n  });"],"sourceRoot":""}