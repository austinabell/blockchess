{"version":3,"sources":["components/Form.jsx","components/SignIn.jsx","components/Messages.jsx","App.js","index.js","config.js"],"names":["Form","onSubmit","currentUser","id","accountId","className","htmlFor","autoComplete","autoFocus","required","defaultValue","max","Big","balance","div","min","step","type","title","SignIn","Messages","messages","map","message","i","premium","sender","text","BOATLOAD_OF_GAS","times","toFixed","App","contract","nearConfig","wallet","useState","setMessages","useEffect","getMessages","then","onClick","signOut","window","location","replace","origin","pathname","requestSignIn","contractName","e","preventDefault","target","elements","fieldset","donation","disabled","addMessage","value","focus","length","a","getConfig","process","nearAPI","deps","keyStore","BrowserLocalStorageKeyStore","near","walletConnection","getAccountId","account","state","amount","viewMethods","changeMethods","nearInitPromise","initContract","ReactDOM","render","document","getElementById","CONTRACT_NAME","module","exports","env","networkId","nodeUrl","walletUrl","helperUrl","keyPath","HOME","masterAccount","Error"],"mappings":"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","file":"static/js/main.cfa8421b.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Big from 'big.js';\n\nexport default function Form({ onSubmit, currentUser }) {\n  return (\n    <form onSubmit={onSubmit}>\n      <fieldset id=\"fieldset\">\n        <p>Sign the guest book, { currentUser.accountId }!</p>\n        <p className=\"highlight\">\n          <label htmlFor=\"message\">Message:</label>\n          <input\n            autoComplete=\"off\"\n            autoFocus\n            id=\"message\"\n            required\n          />\n        </p>\n        <p>\n          <label htmlFor=\"donation\">Donation (optional):</label>\n          <input\n            autoComplete=\"off\"\n            defaultValue={'0'}\n            id=\"donation\"\n            max={Big(currentUser.balance).div(10 ** 24)}\n            min=\"0\"\n            step=\"0.01\"\n            type=\"number\"\n          />\n          <span title=\"NEAR Tokens\">Ⓝ</span>\n        </p>\n        <button type=\"submit\">\n          Sign\n        </button>\n      </fieldset>\n    </form>\n  );\n}\n\nForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n  currentUser: PropTypes.shape({\n    accountId: PropTypes.string.isRequired,\n    balance: PropTypes.string.isRequired\n  })\n};\n","import React from 'react';\n\nexport default function SignIn() {\n  return (\n    <>\n      <p>\n          This app demonstrates a key element of NEAR’s UX: once an app has\n          permission to make calls on behalf of a user (that is, once a user\n          signs in), the app can make calls to the blockhain for them without\n          prompting extra confirmation. So you’ll see that if you don’t\n          include a donation, your message gets posted right to the guest book.\n      </p>\n      <p>\n          But if you do add a donation, then NEAR will double-check that\n          you’re ok with sending money to this app.\n      </p>\n      <p>\n          Go ahead and sign in to try it out!\n      </p>\n    </>\n  );\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function Messages({ messages }) {\n  return (\n    <>\n      <h2>Messages</h2>\n      {messages.map((message, i) =>\n        // TODO: format as cards, add timestamp\n        <p key={i} className={message.premium ? 'is-premium' : ''}>\n          <strong>{message.sender}</strong>:<br/>\n          {message.text}\n        </p>\n      )}\n    </>\n  );\n}\n\nMessages.propTypes = {\n  messages: PropTypes.array\n};\n","import 'regenerator-runtime/runtime';\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Big from 'big.js';\nimport Form from './components/Form';\nimport SignIn from './components/SignIn';\nimport Messages from './components/Messages';\n\nconst SUGGESTED_DONATION = '0';\nconst BOATLOAD_OF_GAS = Big(3).times(10 ** 13).toFixed();\n\nconst App = ({ contract, currentUser, nearConfig, wallet }) => {\n  const [messages, setMessages] = useState([]);\n\n  useEffect(() => {\n    // TODO: don't just fetch once; subscribe!\n    contract.getMessages().then(setMessages);\n  }, [contract]);\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n\n    const { fieldset, message, donation } = e.target.elements;\n\n    fieldset.disabled = true;\n\n    // TODO: optimistically update page with new message,\n    // update blockchain data in background\n    // add uuid to each message, so we know which one is already known\n    contract.addMessage(\n      { text: message.value },\n      BOATLOAD_OF_GAS,\n      Big(donation.value || '0').times(10 ** 24).toFixed()\n    ).then(() => {\n      contract.getMessages().then(messages => {\n        setMessages(messages);\n        message.value = '';\n        donation.value = SUGGESTED_DONATION;\n        fieldset.disabled = false;\n        message.focus();\n      });\n    });\n  };\n\n  const signIn = () => {\n    wallet.requestSignIn(\n      nearConfig.contractName,\n      'NEAR Guest Book'\n    );\n  };\n\n  const signOut = () => {\n    wallet.signOut();\n    window.location.replace(window.location.origin + window.location.pathname);\n  };\n\n  return (\n    <main>\n      <header>\n        <h1>NEAR Guest Book</h1>\n        { currentUser\n          ? <button onClick={signOut}>Log out</button>\n          : <button onClick={signIn}>Log in</button>\n        }\n      </header>\n      { currentUser\n        ? <Form onSubmit={onSubmit} currentUser={currentUser} />\n        : <SignIn/>\n      }\n      { !!currentUser && !!messages.length && <Messages messages={messages}/> }\n    </main>\n  );\n};\n\nApp.propTypes = {\n  contract: PropTypes.shape({\n    addMessage: PropTypes.func.isRequired,\n    getMessages: PropTypes.func.isRequired\n  }).isRequired,\n  currentUser: PropTypes.shape({\n    accountId: PropTypes.string.isRequired,\n    balance: PropTypes.string.isRequired\n  }),\n  nearConfig: PropTypes.shape({\n    contractName: PropTypes.string.isRequired\n  }).isRequired,\n  wallet: PropTypes.shape({\n    requestSignIn: PropTypes.func.isRequired,\n    signOut: PropTypes.func.isRequired\n  }).isRequired\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport getConfig from './config.js';\nimport * as nearAPI from 'near-api-js';\n\n// Initializing contract\nasync function initContract() {\n  const nearConfig = getConfig(process.env.NODE_ENV || 'testnet');\n\n  // Initializing connection to the NEAR TestNet\n  const near = await nearAPI.connect({\n    deps: {\n      keyStore: new nearAPI.keyStores.BrowserLocalStorageKeyStore()\n    },\n    ...nearConfig\n  });\n\n  // Needed to access wallet\n  const walletConnection = new nearAPI.WalletConnection(near);\n\n  // Load in account data\n  let currentUser;\n  if(walletConnection.getAccountId()) {\n    currentUser = {\n      accountId: walletConnection.getAccountId(),\n      balance: (await walletConnection.account().state()).amount\n    };\n  }\n\n  // Initializing our contract APIs by contract name and configuration\n  const contract = await new nearAPI.Contract(walletConnection.account(), nearConfig.contractName, {\n    // View methods are read-only – they don't modify the state, but usually return some value\n    viewMethods: ['getMessages'],\n    // Change methods can modify the state, but you don't receive the returned value when called\n    changeMethods: ['addMessage'],\n    // Sender is the account ID to initialize transactions.\n    // getAccountId() will return empty string if user is still unauthorized\n    sender: walletConnection.getAccountId()\n  });\n\n  return { contract, currentUser, nearConfig, walletConnection };\n}\n\nwindow.nearInitPromise = initContract()\n  .then(({ contract, currentUser, nearConfig, walletConnection }) => {\n    ReactDOM.render(\n      <App\n        contract={contract}\n        currentUser={currentUser}\n        nearConfig={nearConfig}\n        wallet={walletConnection}\n      />,\n      document.getElementById('root')\n    );\n  });","const CONTRACT_NAME = process.env.CONTRACT_NAME || 'guest-book.testnet';\n\nfunction getConfig(env) {\n  switch(env) {\n    case 'mainnet':\n      return {\n        networkId: 'mainnet',\n        nodeUrl: 'https://rpc.mainnet.near.org',\n        contractName: CONTRACT_NAME,\n        walletUrl: 'https://wallet.near.org',\n        helperUrl: 'https://helper.mainnet.near.org'\n      };\n    // This is an example app so production is set to testnet.\n    // You can move production to mainnet if that is applicable.\n    case 'production':\n    case 'development':\n    case 'testnet':\n      return {\n        networkId: 'default',\n        nodeUrl: 'https://rpc.testnet.near.org',\n        contractName: CONTRACT_NAME,\n        walletUrl: 'https://wallet.testnet.near.org',\n        helperUrl: 'https://helper.testnet.near.org'\n      };\n    case 'betanet':\n      return {\n        networkId: 'betanet',\n        nodeUrl: 'https://rpc.betanet.near.org',\n        contractName: CONTRACT_NAME,\n        walletUrl: 'https://wallet.betanet.near.org',\n        helperUrl: 'https://helper.betanet.near.org'\n      };\n    case 'local':\n      return {\n        networkId: 'local',\n        nodeUrl: 'http://localhost:3030',\n        keyPath: `${process.env.HOME}/.near/validator_key.json`,\n        walletUrl: 'http://localhost:4000/wallet',\n        contractName: CONTRACT_NAME\n      };\n    case 'test':\n    case 'ci':\n      return {\n        networkId: 'shared-test',\n        nodeUrl: 'https://rpc.ci-testnet.near.org',\n        contractName: CONTRACT_NAME,\n        masterAccount: 'test.near'\n      };\n    case 'ci-betanet':\n      return {\n        networkId: 'shared-test-staging',\n        nodeUrl: 'https://rpc.ci-betanet.near.org',\n        contractName: CONTRACT_NAME,\n        masterAccount: 'test.near'\n      };\n    default:\n      throw Error(`Unconfigured environment '${env}'. Can be configured in src/config.js.`);\n  }\n}\n\nmodule.exports = getConfig;\n"],"sourceRoot":""}